class h{constructor(e,n="*"){this.channel=new MessageChannel,this.eventIndex=0,this.handlers={};const t=e.getIframe();if(t.hasAttribute("data-event-channel-setup"))throw new Error("An embed viewer instance already initialized on the iframe!");t.setAttribute("data-event-channel-setup","true"),this.channelSetupPromise=(async()=>{await new Promise(s=>{t.addEventListener("load",()=>{var a;this.channel.port1.start();const r=i=>{const[l]=i.data;l==="channel-ready"&&(i.preventDefault(),this.channel.port1.removeEventListener("message",r),this.channel.port1.addEventListener("message",this.eventDispatcher.bind(this)),s(void 0))};this.channel.port1.addEventListener("message",r),(a=t.contentWindow)==null||a.postMessage(["setup-channel",{port:this.channel.port2}],n||"*",[this.channel.port2])})})})()}eventDispatcher(e){const[n,t,s]=e.data||[];n==="event"&&t&&this.handlers[t]&&this.handlers[t].forEach(r=>r(s))}addEventListener(e,n){this.handlers[e]=this.handlers[e]||[],!this.handlers[e].includes(n)&&this.handlers[e].push(n)}removeEventListener(e,n){if(!this.handlers[e])return;const t=this.handlers[e].findIndex(s=>s===n);this.handlers[e].splice(t,1)}async emit(e,n){await this.channelSetupPromise;const t=`xmind-embed-viewer#${this.eventIndex++}`;await new Promise(s=>{const r=a=>{const[i,l]=a.data;i===t&&(this.channel.port1.removeEventListener("message",r),s(l))};this.channel.port1.addEventListener("message",r),this.channel.port1.postMessage([e,n,t])})}}class d{constructor(e,n){let t;const s=typeof e=="string"?document.querySelector(e):e;if(s===null)throw new Error("IFrame or mount element not found by selector "+e);s instanceof HTMLIFrameElement?t=s:(t=document.createElement("iframe"),s.appendChild(t)),t.setAttribute("frameborder","0"),t.setAttribute("scrolling","no"),t.setAttribute("allowfullscreen","true"),t.setAttribute("allow","allowfullscreen"),t.setAttribute("crossorigin","anonymous"),t.setAttribute("src",n),this.iframe=t}getIframe(){return this.iframe}setStyles(e){const n=this.getIframe();for(const[t,s]of Object.entries(e))n.style[t]=s}}class m{constructor(e){this.internalState={sheets:[],zoomScale:100,currentSheetId:""};const{file:n,el:t,styles:s={height:"350px",width:"750px"}}=e,r=new d(t,"https://www.xmind.app/embed-viewer"),a=new h(r,"https://www.xmind.app");this.iframeController=r,this.iframeEventChannelController=a,a.addEventListener("sheet-switch",i=>this.internalState.currentSheetId=i),a.addEventListener("zoom-change",i=>this.internalState.zoomScale=i),a.addEventListener("sheets-load",i=>this.internalState.sheets=i),this.iframeController.setStyles(s),n&&this.load(n)}addEventListener(e,n){this.iframeEventChannelController.addEventListener(e,n)}removeEventListener(e,n){this.iframeEventChannelController.removeEventListener(e,n)}setStyles(e){this.iframeController.setStyles(e)}load(e){this.iframeEventChannelController.emit("open-file",e)}setZoomScale(e){this.iframeEventChannelController.emit("zoom",e)}setFitMap(){this.iframeEventChannelController.emit("fit-map")}switchSheet(e){this.iframeEventChannelController.emit("switch-sheet",e)}get zoom(){return this.internalState.zoomScale}get sheets(){return JSON.parse(JSON.stringify(this.internalState.sheets))}get currentSheetId(){return this.internalState.currentSheetId}}export{m as XMindEmbedViewer};
